# -*- coding: utf-8 -*-
"""Helix BioExplorer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BoNUIJ4d_gFqoTgV1HbLP9hes9ex8Tkf
"""

# Helix BioExplorer: Gene-Protein-Disease Intelligence Platform
# Developed by Terkuma Saaondo for Helix Biogen Institute

import streamlit as st
import requests
import networkx as nx
from pyvis.network import Network
import streamlit.components.v1 as components
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from fpdf import FPDF
import tempfile

st.set_page_config(page_title="Helix BioExplorer", layout="wide")

# --- Header ---
st.title(" Helix BioExplorer")
st.markdown("""
A powerful international-grade platform for exploring relationships between **genes, proteins, and diseases** using real-time biological data.
Developed by **Terkuma Saaondo** for **Helix Biogen Institute**.
""")

# --- Contact Info ---
with st.expander("üì´ Contact Helix Biogen Institute"):
    st.markdown("""
    **Helix Biogen Institute**
    Orisunbare, Along Maryland Nursery And Primary School, Sabo Abogunde Road, Oke Anu, Ogbomoso, Oyo State, Nigeria.
    üìû +(234) 913 0000 390 / +(234) 913 0000 370
    üìß [info@helixbiogeninstitute.org](mailto:info@helixbiogeninstitute.org) / [services@helixbiogeninstitute.org](mailto:services@helixbiogeninstitute.org)
    """)

# --- Input Form ---
st.sidebar.header("üîç Search")
search_type = st.sidebar.selectbox("Search By:", ["Gene", "Protein", "Disease"])
search_term = st.sidebar.text_input("Enter keyword (e.g. TP53, insulin, cancer)")
run_button = st.sidebar.button("üîé Explore")

# --- Main Dashboard ---
if run_button and search_term:
    st.subheader(f"üî¨ Exploring {search_type}: {search_term}")

    # --- Live Data from UniProt API (if Gene or Protein) ---
    if search_type in ["Gene", "Protein"]:
        with st.spinner("Fetching data from UniProt..."):
            try:
                uniprot_url = f"https://rest.uniprot.org/uniprotkb/search?query={search_term}&format=json&size=1"
                response = requests.get(uniprot_url)
                result_json = response.json()
                entry = result_json['results'][0]
                entry_id = entry['primaryAccession']
                protein_name = entry['proteinDescription']['recommendedName']['fullName']['value']
                gene_name = entry['genes'][0]['geneName']['value'] if entry['genes'] else 'N/A'
                function = entry['comments'][0]['texts'][0]['value'] if 'comments' in entry else 'No function data.'
                st.success(f"‚úî Found UniProt Entry: {entry_id}")
                st.markdown(f"**Gene:** {gene_name}")
                st.markdown(f"**Protein:** {protein_name}")
                st.markdown(f"**Function:** {function}")
            except:
                st.warning("‚ö†Ô∏è Unable to fetch from UniProt. Showing demo graph instead.")

    # --- Real-time Disease Associations from DisGeNET ---
    if search_type == "Disease" or search_type == "Gene":
        st.markdown("### üß¨ Disease Associations (DisGeNET API)")
        with st.spinner("Fetching data from DisGeNET..."):
            try:
                disgenet_url = f"https://www.disgenet.org/api/gda/gene/{search_term}?source=ALL"
                headers = {"Accept": "application/json"}
                response = requests.get(disgenet_url, headers=headers)
                if response.status_code == 200:
                    disease_data = response.json()
                    if len(disease_data) > 0:
                        disease_df = pd.DataFrame(disease_data)
                        st.dataframe(disease_df[["disease_name", "score", "source"]].head(10))
                    else:
                        st.info("No disease associations found.")
                else:
                    st.warning("DisGeNET API request failed.")
            except:
                st.error("Error connecting to DisGeNET.")

    # --- Live Publications from PubMed ---
    st.markdown("### üìö Related Publications from PubMed")
    try:
        pubmed_url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&retmax=3&term={search_term}&retmode=json"
        pubmed_response = requests.get(pubmed_url)
        pubmed_ids = pubmed_response.json()['esearchresult']['idlist']
        for pmid in pubmed_ids:
            st.markdown(f"- [PubMed Article {pmid}](https://pubmed.ncbi.nlm.nih.gov/{pmid})")
    except:
        st.warning("‚ö†Ô∏è Could not fetch PubMed data.")

    # --- Network Visualization ---
    G = nx.Graph()
    G.add_node(search_term, label=search_type, color="#FF5733")
    G.add_node("ProteinX", label="Protein", color="#33FFCE")
    G.add_node("DiseaseY", label="Disease", color="#FFC300")
    G.add_edge(search_term, "ProteinX")
    G.add_edge("ProteinX", "DiseaseY")

    net = Network(height="500px", width="100%", bgcolor="#ffffff", font_color="black")
    net.from_nx(G)
    net.save_graph("graph.html")
    HtmlFile = open("graph.html", "r", encoding='utf-8')
    components.html(HtmlFile.read(), height=550)

    # --- Gene Expression Heatmap ---
    st.markdown("### üî¨ Expression Heatmap (Simulated Data)")
    data = pd.DataFrame({
        'Tissue': ['Liver', 'Brain', 'Heart', 'Lung', 'Kidney'],
        'Expression': [12.4, 22.5, 18.7, 15.2, 20.1]
    })
    fig, ax = plt.subplots()
    sns.barplot(x='Tissue', y='Expression', data=data, ax=ax)
    st.pyplot(fig)

    # --- Pathway Viewer (KEGG URL) ---
    st.markdown("### üß≠ Pathway Viewer")
    kegg_link = f"https://www.kegg.jp/dbget-bin/www_bfind_sub?mode=bfind&max_hit=1&serv=kegg&submit=Go&keywords={search_term}"
    st.markdown(f"[üîó View KEGG Pathway Results for {search_term}]({kegg_link})")

    # --- Export Options ---
    st.markdown("### üì§ Export")
    st.download_button("Download Network Graph (HTML)", data=open("graph.html", "rb"), file_name="network_graph.html")

    if st.button("üìÑ Generate Report (PDF)"):
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, txt=f"Helix BioExplorer Report for: {search_term}", ln=True, align='C')
        pdf.ln(10)
        pdf.multi_cell(0, 10, txt=f"Search Type: {search_type}\n\nView KEGG Pathway: {kegg_link}")
        tmpfile = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
        pdf.output(tmpfile.name)
        with open(tmpfile.name, "rb") as f:
            st.download_button("üì• Download PDF Report", f, file_name=f"{search_term}_report.pdf")

# --- Footer ---
st.markdown("---")
st.markdown("¬© 2025 Helix Biogen Institute ‚Äî Developed by Terkuma Saaondo")